using Photons;
using SangoUtils.UnityDevelopToolKits;
using SceneGameObjects;
using System.IO;
using UnityEditor;
using UnityEditor.Compilation;
using UnityEngine;

namespace Editors
{
    [CustomEditor(typeof(ObjectManager))]
    internal class ObjectManagerInspector : Editor
    {
        private const string Dom_Declaration = "/// <summary>\r\n/// This is Generated by a Tools, you should avoid make direct modify it.\r\n/// </summary>\r\n";

        private ObjectManager _manager;

        private SerializedProperty _objGrabableParent;

        private SerializedProperty _objGrabablePrefixCode;

        private void OnEnable()
        {
            serializedObject.Update();

            _manager = (ObjectManager)target;

            _objGrabableParent = serializedObject.FindProperty("_objGrabableParent");

            _objGrabablePrefixCode = serializedObject.FindProperty("_objGrabablePrefixCode");
        }

        public override void OnInspectorGUI()
        {
            EditorGUI.BeginChangeCheck();

            EditorGUILayout.PropertyField(_objGrabableParent);

            EditorGUILayout.PropertyField(_objGrabablePrefixCode);

            if (EditorGUI.EndChangeCheck())
                serializedObject.ApplyModifiedProperties();

            EditorGUILayout.Space();
            if (GUILayout.Button("Generate Names Source File"))
                GenerateNamesSourceFile(_manager);
        }

        private void GenerateNamesSourceFile(ObjectManager manager)
        {
            var codeWriter = new CodeWriter();

            var generatedDirectoryPath = Path.Combine(Application.dataPath, "Generateds", "Runtime");
            var typeNameSourceText = "partial class ObjectManager";

            codeWriter.AppendLine(Dom_Declaration);

            codeWriter.AppendLine("namespace Photons");
            codeWriter.BeginBlock();

            codeWriter.AppendLine(typeNameSourceText);
            codeWriter.BeginBlock();

            if (!Directory.Exists(generatedDirectoryPath))
                Directory.CreateDirectory(generatedDirectoryPath);

            AppendPublicField(codeWriter, _manager);

            codeWriter.EndBlock();
            codeWriter.EndBlock();

            var sourceText = codeWriter.ToString();

            File.WriteAllText(Path.Combine(generatedDirectoryPath, "ObjectManager.g.cs"), sourceText);

            codeWriter.Clear();
            codeWriter = null;

            CompilationPipeline.RequestScriptCompilation();
        }

        private void AppendPublicField(in CodeWriter codeWriter, in ObjectManager manager)
        {
            string sourceText = "";
            string strIndex = "";

            codeWriter.AppendLine("public class ObjGrabableNames");
            codeWriter.BeginBlock();
            for (int i = 0; i < ((GameObject)_objGrabableParent.objectReferenceValue).transform.childCount; i++)
            {
                var item = ((GameObject)_objGrabableParent.objectReferenceValue).transform.GetChild(i);
                if (item.TryGetComponent<GrabableObjectBehaviour>(out var behaviour))
                {
                    var itemName = Validator.ValidateVariableName(item.name);

                    if (i < 10)
                        strIndex = "00" + i;
                    else if (i < 100)
                        strIndex = "0" + i;
                    else if (i < 1000)
                        strIndex = i.ToString();
                    else
                    {
                        Debug.LogError("[Sango] The index overflow in " + nameof(ObjectManager));
                        break;
                    }

                    sourceText = "public const int " + itemName + " = " + _objGrabablePrefixCode.intValue + strIndex + ";";
                    codeWriter.AppendLine(sourceText);
                }
            }
            codeWriter.EndBlock();
        }
    }
}
